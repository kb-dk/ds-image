openapi: 3.0.2
info:
  version: 'v1'
  title: 'ds-image'
  description: |-
    This API implements the functionality of the IIPImage API into the OpenAPI framework used at KB.
    
    The goal is to implement key functionalities from [IIPImage](https://iipimage.sourceforge.io/documentation/protocol/). The following API's are implemented here:
    - [IIIF API](https://iiif.io/api/image/3.0/)
    - [Internet Imaging Protocol](https://iipimage.sourceforge.io/IIPv105.pdf)
    - Deepzoom

    The IIIF Framework is the cornerstone of the services used at The Royal Danish Library.
    Internally IIP and Deepzoom are only used in specific cases. We recommend using IIIF when possible.    

    Specification for OpenAPI can be found [here](https://swagger.io/docs/specification/about/).
  contact:
    email: '${user.name}@kb.dk'
  license:
    name: '${license.name}'
    url: '${license.url}'
servers:
  #  /api must match servlet-mapping in web.xml
  - url: '${config:openapi.serverurl}'
    description: 'Version 1'

paths:
  # IIIF Image request
  # Note: If the signature of this endpoint is changed, AccessApiServiceImpl.iIIFRequestNonescaped must
  #       be manually adjusted to match the new AccessApiServiceImpl.iIIFRequest annotations
  /IIIF/{identifier}/{region}/{size}/{rotation}/{quality}.{format}:
    get:
      tags:
        - 'Access'
      summary: 'IIIF Image Request'
      security:
        - KBOAuth:
          - any
      operationId: IIIFImageRequest
      
      # All parameters are required in the original IIIF Image Requests and has to be specified in the implementation in a specific order.
      # The order in the original IIIF Image Requests is as follows: 
      # Region THEN Size THEN Rotation THEN Quality THEN Format
      parameters:
        - name: identifier
          in: path
          description: "The identifier of the requested image. This may be an ARK, URN, filename, or other identifier. Special characters must be URI encoded, such as / and ?. When using the OpenAPI GUI this encoding is done automatically"
          required: true
          schema:
            type: string
            example: '${config:openapi.exampleid}'
            
        - name: region
          in: path
          description: |- 
            The region parameter defines the rectangular portion of the underlying image content to be returned
            
            Region can be specified by pixel coordinates, percentage or by the value full, which specifies that the full image should be returned.
            
            | Form | Description |
            |------|-------------|
            |**full**|The full image is returned, without any cropping.|
            |**square**|The region is defined as an area where the width and height are both equal to the length of the shorter dimension of the full image. The region may be positioned anywhere in the longer dimension of the full image at the server’s discretion, and centered is often a reasonable default.|
            |**x,y,w,h**|The region of the full image to be returned is specified in terms of absolute pixel values. The value of x represents the number of pixels from the 0 position on the horizontal axis. The value of y represents the number of pixels from the 0 position on the vertical axis. Thus the x,y position 0,0 is the upper left-most pixel of the image. w represents the width of the region and h represents the height of the region in pixels.|
            |**pct:x,y,w,h**|The region to be returned is specified as a sequence of percentages of the full image’s dimensions, as reported in the image information document. Thus, x represents the number of pixels from the 0 position on the horizontal axis, calculated as a percentage of the reported width. w represents the width of the region, also calculated as a percentage of the reported width. The same applies to y and h respectively.|
            
            **EXAMPLE: square**
          required: true
          schema:
            type: string
            default: "full"
            
        - name: size
          in: path
          description: |- 
            The size parameter specifies the dimensions to which the extracted region, which might be the full image, is to be scaled. With the exception of the w,h and ^w,h forms, the returned image maintains the aspect ratio of the extracted region as closely as possible. 
            
            Sizes prefixed with ^ allow upscaling of the extracted region when its pixel dimensions are less than the pixel dimensions of the scaled region.
            
            | Form | Description |
            |------|-------------|
            |**max** |  The extracted region is returned at the maximum size available, but will not be upscaled. The resulting image will have the pixel dimensions of the extracted region, unless it is constrained to a smaller size by maxWidth, maxHeight, or maxArea as defined in the Technical Properties section.|
            |**^max**|  The extracted region is scaled to the maximum size permitted by maxWidth, maxHeight, or maxArea as defined in the Technical Properties section. If the resulting dimensions are greater than the pixel width and height of the extracted region, the extracted region is upscaled.|
            |**w,**|  The extracted region should be scaled so that the width of the returned image is exactly equal to w. The value of w must not be greater than the width of the extracted region.|
            |**^w,**|  The extracted region should be scaled so that the width of the returned image is exactly equal to w. If w is greater than the pixel width of the extracted region, the extracted region is upscaled.|
            |**,h**|  The extracted region should be scaled so that the height of the returned image is exactly equal to h. The value of h must not be greater than the height of the extracted region.|
            |**^,h**|  The extracted region should be scaled so that the height of the returned image is exactly equal to h. If h is greater than the pixel height of the extracted region, the extracted region is upscaled.|
            |**pct:n**|  The width and height of the returned image is scaled to n percent of the width and height of the extracted region. The value of n must not be greater than 100.|
            |**^pct:n**|  The width and height of the returned image is scaled to n percent of the width and height of the extracted region. For values of n greater than 100, the extracted region is upscaled.|
            |**w,h**|  The width and height of the returned image are exactly w and h. The aspect ratio of the returned image may be significantly different than the extracted region, resulting in a distorted image. The values of w and h must not be greater than the corresponding pixel dimensions of the extracted region.|
            |**^w,h**|  The width and height of the returned image are exactly w and h. The aspect ratio of the returned image may be significantly different than the extracted region, resulting in a distorted image. If w and/or h are greater than the corresponding pixel dimensions of the extracted region, the extracted region is upscaled.|
            |**!w,h**|  The extracted region is scaled so that the width and height of the returned image are not greater than w and h, while maintaining the aspect ratio. The returned image must be as large as possible but not larger than the extracted region, w or h, or server-imposed limits.|
            |**^!w,h**|  The extracted region is scaled so that the width and height of the returned image are not greater than w and h, while maintaining the aspect ratio. The returned image must be as large as possible but not larger than w, h, or server-imposed limits.|
            
            **EXAMPLE: ^200,180**
          required: true
          schema:
            type: string
            default: "400,"
            
        - name: rotation
          in: path
          description: |-
            The rotation parameter specifies mirroring and rotation. A leading exclamation mark (“!”) indicates that the image should be mirrored by reflection on the vertical axis before any rotation is applied.
            
            The numerical value represents the number of degrees of clockwise rotation, and may be any floating point number from 0 to 360.
            
            | Form | Description |
            |------|-------------|
            |**n**|The degrees of clockwise rotation from 0 up to 360.|
            |**!n**|The image should be mirrored and then rotated as above.|
            
            In most cases, rotation will change the width and height dimensions of the returned image. The service should return an image that contains all of the image contents requested in the region and size parameters, even if the dimensions of the returned image file are different than specified in the size parameter. The image contents should not be scaled as a result of the rotation, and there should be no additional space between the corners of the rotated image contents and the bounding box of the returned image.

            For rotations which are not multiples of 90 degrees, it is recommended that the client request the image in a format that supports transparency, such as png, and that the server return the image with a transparent background. There is no facility in the API for the client to request a particular background color or other fill pattern.
          required: true
          schema:
            type: string
            default: "0"
          examples:
            no_rotation:
              value: "0"
              summary: "No rotation"
            rotate:
              value: "84"
              summary: Rotate 84 degrees
            rotate_and_flip:
              value: "!165"
              summary: Mirror and rotate 165 degrees
                
            
        - name: quality
          in: path
          description: |-
            The quality parameter determines whether the image is delivered in color, grayscale or black and white.
            
            `default` (IIIF 3.0) and `native` (IIIF 1.0) has the same effect.
            
            | Form | Description |
            |------|-------------|
            |**color**|  The image is returned with all of its color information.|
            |**gray**|  The image is returned in grayscale, where each pixel is black, white or any shade of gray in between.|
            |**bitonal**|  The image returned is bitonal, where each pixel is either black or white.|
            |**default**|  The image is returned using the server’s default quality (e.g. color, gray or bitonal) for the image.|
            |**native**|  The image is returned using the server’s default quality (e.g. color, gray or bitonal) for the image.|
            
            The default quality exists to support [level 0 compliant implementations](https://iiif.io/api/image/3.0/compliance/#quality) that may not know the qualities of individual images in their collections. It also provides a convenience for clients that know the values for all other parameters of a request except the quality (e.g. .../full/120,80/90/{quality}.png to request a thumbnail) in that a preliminary image information request that would only serve to find out which qualities are available can be avoided.
          required: true
          schema:
            type: string
            enum: ["color","gray","bitonal","default", "native"]
            default: "default"
        
        - name: format
          in: path
          description: |-
            The format of the returned image is expressed as a suffix, mirroring common filename extensions.
          required: true
          schema:
            type: string
            enum: ["jpg","tif","png","gif","jp2","pdf","webp"]
            
      x-streamingOutput: true        
      responses:
        '200':
          description: 'Succes!'
          content:
            image/*:
              schema:
                type: string
                format: binary
            application/pdf:
              schema:
                type: string
                format: binary
        '400':
          description: |-
            Bad Request. Please check the formating of the parameters: region, size and rotation.
            
            Check if the requested region’s height or width is zero, or if the region is entirely outside the bounds of the reported dimensions
            
            Requests for sizes not prefixed with ^ that result in a scaled region with pixel dimensions greater than the pixel dimensions of the extracted region are errors that should result in a 400 (Bad Request) status code.
            
            Check for syntax errors in size parameter
            
            A rotation value that is out of range or unsupported should result in a 400 (Bad Request) status code.
            
  # IIIF Image Information
  # Note: If the signature of this endpoint is changed, AccessApiServiceImpl.getImageInformationNonescaped must
  #       be manually adjusted to match the new AccessApiServiceImpl.getImageInformation annotations
  /IIIF/{identifier}/info.{format}:
    get:
      tags:
        - 'Access'
      summary: 'IIIF Image Information'
      security:
        - KBOAuth:
          - any
      operationId: getImageInformation
      parameters:
      - name: identifier
        in: path
        description: "The identifier of the requested image. This may be an ARK, URN, filename, or other identifier. Special characters must be URI encoded. The OpenAPI grafical user interface takes care of the encoding when experimenting"
        required: true
        schema:
          type: string
          example: '${config:openapi.exampleid}'
      
      - name: format
        in: path
        description: "The service returns technical information about the requested image in JSON format. XML is also supported as it was used in version one of the IIIF API"
        required: true
        schema:
          type: string
          enum: ["json", "xml"]

      # TODO: This is not very clean, but the alternative seems to be to copy JSONs. Find a third way
      x-streamingOutput: true
      responses:
        '200':
            description: 'Succes!'
            content: 
              application/ld+json:
                schema:
                  $ref: '#/components/schemas/IIIF_info'
              application/xml:
                schema:
                  $ref: '#/components/schemas/IIIF_info'

# Internet Imaging Protocol
  /IIP/:
    get:
      tags:
        - 'Access'
      summary: 'Internet Imaging Protocol'
      security:
        - KBOAuth:
          - any
      description: |-
        Most of our services at the Royal Library makes use of the IIIF standard.
        IIP is currently supported for backwards compatibility and support might be dropped in the future.
        There is no support or updates scheduled for this endpoint. Our API supports parameters from version 1.0 and onwards. 
        This means that parameters like Simulated hill-shading (SHD) from version 0.9.7 and quality layers (LYR) from version 0.9.9 aren't supported through this API.
      operationId: IIPImageRequest
      parameters:
        - name: FIF
          in: query
          description: |- 
            Full image path. If the FILESYSTEM_PREFIX server parameter has been set, the path is relative to that path.
            
            Note that all IIP protocol requests must start with the FIF parameter
          required: true
          schema:
            type: string
            example: '${config:openapi.exampleid}'

        - name: WID
          in: query
          description: |- 
            Specify width in pixels, w, for exports with CVT request.
            
            **WID requires CVT**
          schema:
            type: integer
            format: int64
            
        - name: HEI
          in: query
          description: |-
            Specify height in pixels, h, for exports with CVT requests
            
            **HEI requires CVT**
          schema:
            type: integer
            format: int64

        - name: RGN
          in: query
          description: |- 
            Define a region of interest starting at relative coordinates x,y with width w and height h.
            
            For use with CVT requests. All values should be ratios in the range 0 – 1.0
            
            When using the RGN parameter, please note that the WID parameter is **NOT** automatically adjusted. 
            If WID is not adjusted accordingly you will receive an upscale version of the region requested. 
            WID defaults to the original image width in pixels.
            The original width of the image, can be obtained through the ```/IIIF/{identifier}/info.{format}```-endpoint.  
              
            **RGN has to be defined as x,y,w,h and requires CVT, WID & HEI** 
          schema: 
            type: array
            items:
              type: number
              format: float
              minimum: 0
              maximum: 1.0
            minItems: 4
            maxItems: 4
          style: form
          explode: false
          
        - name: QLT
          in: query
          description: |- 
            Set the output compression level, q.
              
            Valid ranges are JPEG: 0-100 and for PNG: 0-9 where a higher value means more compression
            
            JPEG is always lossy even with a value of 100, while PNG is lossles.
          schema:
            type: integer
            format: int32
            minimum: 0
            maximum: 100
        
        # Equlization and Stretch are mentioned in the short documentation at https://iipimage.sourceforge.io/documentation/protocol/. However it is not clear how it is used. Furthermore these parameters are not described in the thorough descriiption at https://iipimage.sourceforge.io/IIPv105.pd
        
        # As of now, EQ and ST are not implemented in the OpenAPI version
        - $ref: '#/components/parameters/CNT'

        - name: ROT
          in: query
          description: |-
            Rotate (and flip) image by given number of degrees, r. Only 90, 180 and 270 supported.
            
            If angle is prefixed by an exclamation mark !, the image is flipped horizontally before rotation (ex: ROT=!90). Vertical flipping can be achieved by combining horizontal flipping and 180° rotation
          schema:
            type: string
          examples:
            no_rotation:
              value: "0"
              summary: "Return image with no rotation"
            rotate:
              value: "180"
              summary: "Rotates image 180 degress"
            flip_and_rotate:
              value: "!90"
              summary: "Flips image and rotates 90 degrees"
        
        - $ref: '#/components/parameters/GAM'
        
        - $ref: '#/components/parameters/CMP'
            
        - name: PFL
          in: query
          description: |- 
            Export profile in JSON format at resolution r from position x1,y1 to x2, y2.
            
            Only horizontal or vertical profiles are currently supported.
            
            **PFL has to be defined specifically as r:x1,y1-x2,y2**
            
            **Example 800:20,20-440,440**
          schema:
            type: string
        
        - $ref: '#/components/parameters/CTW'
        
        # TODO: How do we handle empty arguments in the tooling?
        # OpenAPI does not like empty arguments.
        - $ref: '#/components/parameters/INV'
        
        - $ref: '#/components/parameters/COL'
        
         # JTL, PTL and CVT has to be set after all other parameters in the implementation
        - name: JTL
          in: query
          description: |- 
            Return a tile in JPEG format with index n at resolution level r
            
            **JTL has to be specified as r,n** 
          
          schema:
            $ref: '#/components/schemas/JTL_PTL'
          style: form
          explode: false
        
        # JTL, PTL and CVT has to be set after all other parameters in the implementation
        - name: PTL
          in: query
          description: |- 
            Return a tile in PNG format at resolution level r with index n
              
            **PTL has to be specified as r,n**
          schema: 
            $ref: '#/components/schemas/JTL_PTL'
          style: form
          explode: false
        
        # JTL, PTL and CVT has to be set after all other parameters in the implementation  
        - name: CVT
          in: query
          description: |- 
            Export the full image or a region in the specified format (JPEG and PNG currently supported)
          schema:
            type: string
            enum: ["jpeg", "png"]
            default: "jpeg"

      x-streamingOutput: true
      responses:
        '200':
          description: OK
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary      
        '400':
          description: Bad Request. PFL or CTW has been defined incorrectly.
        '404':
          description: An image with the provided FIF was not found.
  
  # DeepZoom
  # Note: If the signature of this endpoint is changed, AccessApiServiceImpl.getDeepzoomDZINonescaped must
  #       be manually adjusted to match the new AccessApiServiceImpl.getDeepzoomDZI annotations
  /deepzoom/{imageid}.dzi:
    get:
      tags:
        - 'Access'
      summary: 'DeepZoom Image information'
      security:
        - KBOAuth:
          - any
      description: |- 
        DeepZoom is deprecated. Internally it is used for one specific service, which is to be handled differently in the future.  

        DeepZoom is almost always used with the OpenSeadragon software. OpenSeadragon is capable of using IIIF directly through IIIF's *myimage/info.json*. 

        DeepZoom provides the ability to interactively view high-resolution images. You can zoom in and out of images rapidly without affecting the performance of your application. Deep Zoom enables smooth loading and panning by serving up multi-resolution images and using spring animations.
      operationId: getDeepzoomDZI
      deprecated: true
      parameters:
      - name: imageid
        in: path
        description: "Identifier for image."
        required: true
        schema:
          type: string
        example: "/avis-show/symlinks/0/0/0/0/00001afe-9d6b-46e7-b7f3-5fb70d832d4e"

      # Stream to avoid "retrieving, deserializing JSON, constructing POJOs, serializing JSON, sending JSON"-chain
      x-streamingOutput: true
      responses:
        '200':
            description: 'Succes!'
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/DeepzoomDZI'
              application/xml:
                schema:
                  $ref: '#/components/schemas/DeepzoomDZI'
                  
  # Note: If the signature of this endpoint is changed, AccessApiServiceImpl.getDeepzoomTileNonescaped must
  #       be manually adjusted to match the new AccessApiServiceImpl.getDeepzoomTile annotations
  /deepzoom/{imageid}_files/{layer}/{tiles}.{format}:
    get:
      tags:
        - 'Access'
      summary: 'DeepZoom Tile'
      security:
        - KBOAuth:
          - any
      description: |- 
        DeepZoom is deprecated. Internally it is used for one specific service, which is to be handled differently in the future.

        DeepZoom is almost always used with the OpenSeadragon software. OpenSeadragon is capable of using IIIF directly through IIIF's *myimage/info.json*. 

        DeepZoom can bee used with the Internet Imaging Protocol (IIP). This endpoint only requires the DeepZoom parameter to work. Besides, this endpoint has the capability to make use of the IIP parameters shown below. 
      operationId: getDeepzoomTile
      deprecated: true
      parameters:
      - name: imageid
        in: path
        description: 'Identifier/path for image.'
        required: true
        schema:
          type: string
        example: "image/path.tif"
      - name: layer
        in: path
        description: 'Zoom layer for the tile'
        required: true
        schema:
          type: integer
          format: int32
          default: 8
      - name: tiles
        in: path
        description: 'Tile specified as x_y at the given layer'
        required: true
        schema:
          type: string
        example: "0_0"
      - name: format
        in: path
        description: 'Output format'
        required: true
        schema:
          type: string
          enum: ["jpg", "png", "jpeg"]
          
      # IIP parameters 
      - $ref: '#/components/parameters/CNT'
      - $ref: '#/components/parameters/GAM'
      - $ref: '#/components/parameters/CMP'
      - $ref: '#/components/parameters/CTW'
      - $ref: '#/components/parameters/INV'
      - $ref: '#/components/parameters/COL'
        
      x-streamingOutput: true
      responses:
        '200':
          description: 'Succes!'
          content:
            image/*:
              schema:
                type: string
                format: binary

  /kaltura/thumbnails/:
    get:
      tags:
        - 'Access'
      summary: ' Get urls to thumbnail video images at Kaltura for a record identified by file_id field in Solr.'
      security:
        - KBOAuth:
          - any
      description: |-       
        Get a list of url to thumbnail vidoe images at Kaltura for a record identified by file_id field in Solr.          
        Will contain a default thumbnail, a sprite and list of time sliced thumbnails.     
        [Kaltura Thumbnail API](https://developer.kaltura.com/api-docs/Engage_and_Publish/kaltura-thumbnail-api.html)                     
      operationId: kalturaThumbnails
   
      parameters:
        - name: fileId
          in: query
          description: 'The external file reference to the kaltura'           
          required: true
          schema:            
            type: string
        - name: numberOfThumbnails
          in: query
          description: 'The number of thumbnails. The thumbnails will be spread evenly over the duration of the video. Maximum of 100 is allowed.'
          required: true
          schema:            
            type: integer
            minimum: 1
            maximum: 100            
            default: 10
        - name: secondsStartSeek
          in: query
          description: 'secondsEndSeek must also be defined for seeking to be  activated. The thumbnails will be generated from between secondsStartSeek and secondsEndSeek '          
          schema:            
            type: integer
            minimum: 0
            maximum: 86400
            default: 0            
        - name: secondsEndSeek
          in: query
          description: 'If secondsEndSeek is defined the thumbnails will be generated from between secondsStartSeek and secondsEndSeek.'          
          schema:            
            type: integer
            minimum: 5
            maximum: 86400                                
        - name: width
          in: query
          description: 'Width of the thumbnails'
          required: false
          schema:            
            type: integer
            minimum: 1
            maximum: 10000
        - name: height
          in: query
          description: 'Heigth of the thumbnails'
          required: false
          schema:            
            type: integer
            minimum: 1
            maximum: 10000            
                       
      responses:
        '200':
          description: OK. List of links to thumbnail images. First link is a sprite containing all images
          content:
            application/json:
             schema:
                $ref: '#/components/schemas/Thumbnails'                    
              
  # The ping service should be in all projects, should not do any advanced processing
  # and should respond quickly with a simple message, e.g. "pong".
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the more detailed /monitor/status is defined below.
  /monitor/ping:
    get:
      tags:
        - Service
      summary: 'Ping the server to check if the server is reachable.'
      operationId: ping
      x-useGenericResponse: false # If enabled the method will return Response
      x-streamingOutput: false # If enabled the method will return StreamingOutput.
      responses:
        '200':
          description: 'OK'
          content:
            text/plain:
              schema:
                type: string
        '406':
          description: 'Not Acceptable'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  
  # The status service should be in all projects and should provide a list of running jobs,
  # the overall health of the service and similar. While the endpoint should be kept at
  # /monitor/status, the response should be adjusted to fit the application.
  #
  # Note that it is placed under /monitor. The top namespace /monitor is intended for
  # proxying to monitoring software or manual health checks. All endpoints under that
  # namespace should be safe to expose: No changes to state, no confidential information!
  #
  # Note that the simple /monitor/ping is defined above.
  /monitor/status:
    get:
      tags:
        - Service
      summary: 'Detailed status / health check for the service'
      operationId: status
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
        '500':
          description: 'Internal Error'
          content:
            text/plain:
              schema:
                type: string

  /monitor/whoami:
    get:
      tags:
        - Service
      summary: 'Extract OAuth2 accessToken in the `Authorization` HTTP header and return the roles from it'
      operationId: probeWhoami
      security:
        - KBOAuth:
          - public
      responses:
        '200':
          description: 'OK'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'

components:
  schemas:
    JTL_PTL:
      type: array
      items:
        type: integer
        format: int32
      minItems: 2
      maxItems: 2
    
    # jsonld response for IIIF image information
    IIIF_info:
      xml:
        name: info
        namespace: 'http://library.stanford.edu/iiif/image-api/ns/'
      type: object
      properties:
        # IIIF uses @context. How do we implement the @ in the OpenAPI YAML
        '@context':
          type: string
          description: URI of image
          example: "http://iiif.io/api/image/3/context.json"
        id:
          type: string
          description:   The base URI of the image as defined in URI Syntax, including scheme, server, prefix and identifier without a trailing slash.
          example: "{scheme}://{server}{/prefix}/{identifier}"
        type:
          type: string
          description: The type for the Image API. The value must be the string ImageService3.
          example: "ImageService3"
        protocol:
          type: string
          description: The URI http://iiif.io/api/image which can be used to determine that the document describes an image service which is a version of the IIIF Image API.
          example: "http://iiif.io/api/image"
        profile:
          type: string
          description: A string indicating the highest compliance level which is fully supported by the service. The value must be one of level0, level1, or level2.
          example: "level1"
        width:
          type: integer
          format: int64
          description: The width in pixels of the full image, given as an integer.
          example: 6000
        height:
          type: integer
          format: int64
          description: The height in pixels of the full image, given as an integer.
          example: 4000
        maxWidth:
          type: integer
          format: int64
          description: The maximum width in pixels supported for this image. Clients must not expect requests with a width greater than this value to be supported. maxWidth must be specified if maxHeight is specified.
          example: 3000
        maxHeight:
          type: integer
          format: int64
          description: The maximum height in pixels supported for this image. Clients must not expect requests with a height greater than this value to be supported. If maxWidth is specified and maxHeight is not, then clients should infer that maxHeight = maxWidth.
          example: 2000
        maxArea:
          type: integer
          format: int64
          description: The maximum area in pixels supported for this image. Clients must not expect requests with a width*height greater than this value to be supported.
          example: 4000000
        sizes:
          type: array
          description: An array of JSON objects with the height and width properties. These sizes specify preferred values to be provided in the w,h syntax of the size request parameter for scaled versions of the full image
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of the object. If present, the value must be the string Size.
                example: "Size"
              width:
                type: integer
                format: int64
                description: The width in pixels of the image to be requested, given as an integer.
                example: 150
              height:
                type: integer
                format: int64
                description: The height in pixels of the image to be requested, given as an integer.
                example: 100 
            required:
            - width
            - height
        tiles:
          type: array
          description: An array of JSON objects describing the parameters to use to request regions of the image (tiles) that are efficient for the server to deliver. Each description gives a width, optionally a height for non-square tiles, and a set of scale factors at which tiles of those dimensions are available
          items:
            type: object
            properties: 
              type:
                type: string
                description: The type of the object. If present, the value must be the string Tile.
                example: "Tile"
              scaleFactors:
                type: integer
                format: int32
                description: The set of resolution scaling factors for the image’s predefined tiles, expressed as positive integers by which to divide the full size of the image. For example, a scale factor of 4 indicates that the service can efficiently deliver images at 1/4 or 25% of the height and width of the full image. A particular scale factor value should appear only once in the tiles array.
                example: 2
                minimum: 1
              width:
                type: integer
                format: int32
                description: The width in pixels of the predefined tiles to be requested, given as an integer.
                example: 512
              height:
                type: integer
                format: int32
                description: The height in pixels of the predefined tiles to be requested, given as an integer. If it is not specified in the JSON, then it defaults to the same as width, resulting in square tiles.
                example: 512
            required:
            - scaleFactor
            - width
        preferredFormats:
          description: An array of strings that are the preferred format parameter values, arranged in order of preference. The format parameter values listed must be among those specified in the referenced profile or listed in the extraFormats property
          type: array
          items:
            type: string
            example: "webp"
        rights:
          type: string
          description: A string that identifies a license or rights statement that applies to the content of this image. The value of this property must be a string drawn from the set of Creative Commons license URIs, the RightsStatements.org rights statement URIs, or those added via the Registry of Known Extensions mechanism. The inclusion of this property is informative, and for example could be used to display an icon representing the rights assertions.
          example: "http://rightsstatements.org/vocab/InC-EDU/1.0/"
        extraQualities:
          type: array
          description: An array of strings that can be used as the quality parameter, in addition to default.
          items:
            type: string
            example: "color"
        extraFormats:
          type: array
          description: An array of strings that can be used as the format parameter, in addition to the ones specified in the referenced profile.
          items:
            type: string
            example: "pdf"
        # extraFeatures takes a specific list of strings. Is that to be defined in this YAML file or is that done elsewhere?
        extraFeatures:
          type: array
          description: An array of strings identifying features supported by the service, in addition to the ones specified in the referenced profile. These strings are defined either in the table below or by registering an extension.
          items:
            type: string
            example: "rotationArbitrary"
        partOf: 
          type: array
          description:   A link to another resource that references this image service, for example a link to a Canvas or Manifest. The value must be an array of JSON objects. Each item must have the id and type properties, and should have the label property.
          items: 
            type: object
            properties:
              id:
                type: string
                description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                example: "https://example.org/manifest/1"
              type:
                type: string
                description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                example: "Manifest"
              label:
                type: string
                description: A human-readable label for this resource. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the languages section of the Presentation API.
                example: "A Book"
            required:
            - id
            - type
        seeAlso:
          type: array
          description: A link to an external, machine-readable resource that is related to this resource, such as an XML or RDF description. Properties of the external resource should be given to help the client select between multiple descriptions (if provided), and to make appropriate use of the document. The URI of the document must identify a single representation of the data in a particular format. The value must be an array of JSON objects. Each item must have the id and type properties, and should have the label, format and profile properties
          items:
            type: object
            properties:
              id:
                type: string
                description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                example: "https://example.org/image1.xml"
              type:
                type: string
                description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                example: "Dataset"
              label:
                type: string
                description: A human-readable label for this resource. The label property can be fully internationalized, and each language can have multiple values. This pattern is described in more detail in the languages section of the Presentation API.
                example: "Technical image metadata"
              format: 
                type: string
                description: The specific media type (often called a MIME type) for this content resource, for example “image/jpeg”. This is important for distinguishing different formats of the same overall type of resource, such as distinguishing text in XML from plain text. The value must be a string, and it should be the value of the Content-Type header returned when this resource is dereferenced.
                example: "text/xml"
              profile:
                type: string
                description: A schema or named set of functionality available from this resource. The profile can further clarify the type and/or format of an external resource. The value must be a string, either taken from the Registry of Profiles or a URI.
                example: "https://example.org/profiles/imagedata"
            required:
            - id
            - type
        service:
          type: array
          description: A reference to an external service that the client might interact with directly to gain additional information or functionality, for example a link to an authentication service. The value must be an array of JSON objects. Each object will have properties depending on the service’s definition, but must have either the id and type properties, or the @id and @type properties for backwards compatibility with other IIIF APIs. Each object should have a profile property. See the Service Registry for known service type
          items:
            type: object
            properties:
              id:
                type: string
                description: The URI of the external resource. (The @id property may be used in service objects for backwards compatibility as described above.)
                example: "https://example.org/auth/login"
              type:
                type: string
                description: The type or class of this resource. Recommendations for basic types such as image, text or audio are given in the Presentation API. (The @type property may be used in service objects for backwards compatibility as described above.)
                example: "AuthCookieService1"
              profile:
                type: string
                description: A schema or named set of functionality available from this resource. The profile can further clarify the type and/or format of an external resource. The value must be a string, either taken from the Registry of Profiles or a URI.
                example: "http://iiif.io/api/auth/1/login"
            required: 
            - id
            - type
      required:
      - context
      - id
      - type
      - protocol
      - profile
      - width
      - height
    
    # Response for Deepzoom DZI
    DeepzoomDZI:
      xml: 
        name: 'Image'
        namespace: 'http://schemas.microsoft.com/deepzoom/2008'
      type: object
      properties:
        TileSize:
          type: integer
          format: int32
          xml:
            attribute: true
          example: 256
        Overlap:
          type: integer
          format: int32
          xml:
            attribute: true
          example: 0
        Format:
          type: string
          xml:
            attribute: true
          example: 'jpg'
        Size:
          type: object
          properties:
            Width:
              type: integer
              format: int64
              xml:
                attribute: true
              example: 3505
            Height:
              type: integer
              format: int64
              xml:
                attribute: true
              example: 4752

    # Thumbnails to Kaltura
    Thumbnails:
      type: object
      properties:
        default:
          type: string
          description: 'Default thumbnail defined for the video. This is a thumbnail that can be changed by Kaltura administrators'      
        sprite:
          type: string
          description: 'Link to image with all thumbnails.'            
        thumbnails:        
          type: array
          description: 'List to the time slice thumbnails in chronological order ' 
          items: 
            type: string

 
    # Basic status response component.
    Status:
      type: object
      required:
        - application
        - version
      properties:
        application:
          type: string
          description: 'The name of the application'
          example: 'MyService'
        version:
          type: string
          description: 'The version of the application'
          example: '1.0'
        build:
          type: string
          description: 'When the application was build'
          example: '2022-08-T13:37:16Z'
        java:
          type: string
          description: 'The Java version that runs the container'
          example: '11.0.11'
        heap:
          type: integer
          format: int64
          description: 'The maximum number of bytes available to the container in megabytes'
          example: '4096'
        server:
          type: string
          description: 'The hostname for the server'
          example: 'miaplacidus'
        health:
          type: string
          description: 'Self diagnosed health'
          example: 'ok'
        gitCommitChecksum:
          type: string
          description: 'The checksum of the deployed commit.'
          example: 'ca82a6dff817ec66f44342007202690a93763949'
        gitBranch:
          type: string
          description: 'The current deployed branch.'
          example: master
        gitClosestTag:
          type: string
          description: 'The closest tag of the deployed branch.'
        gitCommitTime:
          type: string
          description: 'The time for the latest commit of the deplyed branch.'

    Whoami:
      type: object
      description: 'OAuth2 information derived from the request'
      properties:
        token:
          type: object
          required:
            - present
          properties:
            present:
              type: boolean
              description: 'True if an OAuth2 accessToken was present in the request, else false'
              example: true
            valid:
              type: boolean
              description: 'True is an OAuth2 accessToken was present and valid, else false'
              example: false
            error:
              type: string
              description: 'If the accessToken is not valid, the reason will be stated here'
            roles:
              type: array
              items:
                type: string
              description: 'The roles stated in the OAuth2 accessToken'
              example: [read, write, admin]

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  
  parameters:
    # CNT for IIP and DeepZoom
    CNT:
      name: CNT
      in: query
      description: |-
          Contrast adjustment: multiplication of pixel values by factor, c. Value should be an integer or float > 0. A value of 1.0 indicates no contrast change
      schema:
        type: number
        format: float
        minimum: 0
        exclusiveMinimum: true
    # GAM for IIP and DeepZoom
    GAM:
      name: GAM
      in: query
      description: |- 
        Apply gamma correction, g: each pixel value to the power of g.
        
        If g=log or g=logarithm, the logarithm is applied
      schema:
        type: number
        format: float
    # CMP for IIP and DeepZoom
    CMP:
      name: CMP
      in: query
      description: "Generate colormap using one of the standard colormap schemes, s: GREY, JET, COLD, HOT, RED, GREEN and BLUE."
      schema: 
        type: string
        enum: ["GREY", "JET", "COLD", "HOT", "RED", "GREEN", "BLUE"]
    # CTW for IIP and DeepZoom
    CTW:
      name: CTW
      in: query
      description: |- 
        Color twist / channel recombination. Recombine the available image channels into a new color image by multiplication through a matrix. Columns are separated by commas and rows are separated by semi-colons. Values can also be negative.
        
        Thus, for the 3×3 matrix example provided below, the RGB output image will have bands R = R*r1 + G*g1 + B*b1, G = R*r2 + G*g2 + B*b2, B = R*r3 + G*g3 + B*b3.
        
        For multi-band images, the row length should correspond to the number of available bands within the image. The number of output bands depends on the number of rows in the matrix. Thus, to output a 1 band greyscale image, specify just a single row.

        Examples:
        To perform naive conversion from 3 channel color to 1 channel grayscale: CTW=[0.33,0.33,0.33]
        
        To flip the R and B channels and map an RGB image to BGR: CTW=[0,0,1;0,1,0;1,0,0]
        
        For a 5-band multispectral image, to show the difference between the 5th and 2nd band (i.e. 5th-2nd) and outputting the result as grayscale: CTW=[0,-1,0,0,1]
        
        To create a false-color image from a 4-band RGB-IR image by mapping the G,R,IR channels to the output RGB: CTW=[0,1,0,0;0,0,1,0;0,0,0,1]
        
        **CTW has to be defined as [array;array;array] using ; as delimter between arrays and , between integers**
      schema: 
        type: string
    # INV for IIP and DeepZoom
    # OpenAPI does not like empty arguments. Here we are defining it as a boolean and handling it in the implementation
    INV:
      name: INV
      in: query
      description: "Invert image (no argument)"
      schema: 
        type: boolean
    # COL for IIP and DeepZoom
    COL:
      name: COL
      in: query
      description: |- 
        Color transformation to output space, c. Valid values are greyscale (GREY or GRAY) or to binary (BINARY). 
        
        Examples:
        Convert to greyscale: COL=gray
        
        Convert to binary: COL=binary
      schema: 
          type: string
          enum: ["gray", "grey", "binary"]
    

  # TODO: Inject this from properties when DRA-139 has been implemented
  securitySchemes:

    KBOAuth:
      type: oauth2
      description: 'This API uses OAuth 2 with the implicit grant flow. [More info](https://api.example.com/docs/auth)'
      flows:
        implicit:   # <---- OAuth flow(authorizationCode, implicit, password or clientCredentials)
          authorizationUrl: 'https://keycloak-devel-01.kb.dk/realms/ds-poc/protocol/openid-connect/auth'
          #authorizationUrl: https://api.example.com/oauth2/authorize # Overridden by the configuration
          scopes:
            generic_ds: 'Scope used for all Digitale Samlinger services'
            # Project specific roles
            read: 'read data'
            write: 'modify or delete data'

            # General roles at the Royal Danish Library
            devel: 'broad read access'
            admin: 'all rights'

            # Meta role controlling authorization behaviour
            public: 'allowed for all, authorization optional, implementation behaviour depending on caller roles'
            any: 'allowed for all, authorization mandatory, implementation behaviour depending on caller roles'

