<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
      <groupId>dk.statsbiblioteket.sbprojects</groupId>
      <artifactId>sbprojects-parent</artifactId>
      <version>80</version>
    </parent>

    <name>ds-image</name> <!-- Human readable name, uppercase and spaces welcome -->
    <groupId>dk.kb.image</groupId>
    <artifactId>ds-image</artifactId>
    <version>1.7.2-SNAPSHOT</version>
    
    <packaging>war</packaging>
    <description>ds-image by the Royal Danish Library</description>

    <repositories>
        <repository>
            <id>sbforge-nexus</id>
            <url>https://sbforge.org/nexus/content/groups/public</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <scm>
        <url>https://github.com/kb-dk/ds-image</url>
        <connection>scm:git:git@github.com:kb-dk/ds-image.git</connection>
        <developerConnection>scm:git:git@github.com:kb-dk/ds-image.git</developerConnection>
        <tag>HEAD</tag>
    </scm>

    <licenses>
        <!--SBForge stuff should have a license-->
        <license>
            <name>${license.name}</name>
            <url>${license.url}</url>
        </license>
    </licenses>

    <properties>
        <!-- Specify java version here, to support forbiddenapis plugin -->
        <!-- If the version is changed from 17 to something else, Jenkinsfile must also be updated -->
        <!-- ds-image: We use Java 11 for now, as our devel server is still at that level -->
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <!-- Enable forbiddenapis plugin, do disable set to none -->
        <api.check.phase>process-test-classes</api.check.phase>
        <!--Specify the licenses here, so they can be picked up by openAPI-->
        <license.name>Apache License, Version 2.0</license.name>
        <license.url>https://www.apache.org/licenses/LICENSE-2.0.txt</license.url>
        <timestamp>${maven.build.timestamp}</timestamp>

        <project.package>dk.kb.image</project.package>
    </properties>

    <dependencies>
        <dependency>
            <groupId>dk.kb.util</groupId>
            <artifactId>kb-util</artifactId>
            <version>1.6.9</version>
        </dependency>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>4.0.2</version>
            <scope>provided</scope>
        </dependency>

        <!-- Client for ds-license. This will also require the org.openapitools dependency-->
      <dependency>
        <groupId>dk.kb.license</groupId>
        <artifactId>ds-license</artifactId>
          <version>1.5.0</version>
          <type>jar</type>
          <classifier>classes</classifier>
          <exclusions>
            <exclusion>
              <groupId>*</groupId>
              <artifactId>*</artifactId>
            </exclusion>
        </exclusions>
      </dependency>



        <!-- Apache CXF and servlet stuff -->
        <dependency>
            <groupId>jakarta.ws.rs</groupId>
            <artifactId>jakarta.ws.rs-api</artifactId>
            <version>2.1.6</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-transports-http</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.4</version>            
            <scope>runtime</scope>
        </dependency>
        <!-- https://mvnrepository.com/artifact/javax.xml.ws/jaxws-api -->
        <dependency>
          <groupId>javax.xml.ws</groupId>
          <artifactId>jaxws-api</artifactId>
          <version>2.3.1</version>
          <exclusions>
            <!-- Project has jakarta.xml.bind-api v. 2.3.3 from cxf-rt-transports-http-->
            <exclusion>
              <groupId>javax.xml.bind</groupId>
              <artifactId>jaxb-api</artifactId>
            </exclusion>
            <!-- Project has jakarta.annotation-api v.1.3.5 through KB-util dependency.-->
            <exclusion>
              <groupId>javax.annotation</groupId>
              <artifactId>javax.annotation-api</artifactId>
            </exclusion>
          </exclusions>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.8</version>
        </dependency>
        
        <!--For getting thumbnails from Kaltura -->
      <dependency>
          <groupId>dk.kb.kaltura</groupId>
          <artifactId>ds-kaltura</artifactId>
          <version>1.2.6</version>
          <type>jar</type>
      </dependency>

        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-xml-provider</artifactId>
            <version>2.10.1</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.openapitools/jackson-databind-nullable
             Used for OpenAPI client generation -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>jackson-databind-nullable</artifactId>
            <version>0.2.2</version>
        </dependency>
        <dependency>
            <groupId>com.fasterxml.jackson.jaxrs</groupId>
            <artifactId>jackson-jaxrs-json-provider</artifactId>
            <version>2.16.0</version>
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-client</artifactId>
            <version>3.6.2</version>
            <!-- Latest version is 4.0.3. Not tested -->
        </dependency>
        <dependency>
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <!--For the openapi endpoint /openapi.json-->
            <groupId>org.apache.cxf</groupId>
            <artifactId>cxf-rt-rs-service-description-openapi-v3</artifactId>
            <!-- Latest version is 4.0.3. Not tested -->
            <version>3.6.2</version>
        </dependency>
        <dependency>
            <!--For the swagger UI endpoint /api-docs?url=openapi.json-->
            <groupId>org.webjars</groupId>
            <artifactId>swagger-ui</artifactId>
            <version>5.18.2</version>
        </dependency>

        <!-- openapitools dependency -->
        <dependency>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-jaxrs</artifactId>
            <exclusions>
                <exclusion>
                    <artifactId>jsr311-api</artifactId>
                    <groupId>javax.ws.rs</groupId>
                </exclusion>
                <exclusion>
                    <!-- swagger-jaxrs has 1.1.0.Final, but transitive resolving has 2.0.2 somewhere-->
                    <groupId>javax.validation</groupId>
                    <artifactId>validation-api</artifactId>
                </exclusion>
            </exclusions>
            <version>1.5.24</version>
        </dependency>
        <!-- To get date parsing to work? -->
        <!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-modules-java8 -->
<!--        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-modules-java8</artifactId>
            <version>2.13.1</version>
            <type>pom</type>
            <scope>runtime</scope>
        </dependency>-->

        <!-- To get client generation to work -->
        <!-- https://mvnrepository.com/artifact/org.openapitools/openapi-generator -->
        <dependency>
            <groupId>org.openapitools</groupId>
            <artifactId>openapi-generator</artifactId>
            <version>7.11.0</version>

             <exclusions>
                <exclusion>
                     <!-- The slf4j-simple logs to stderr and stdout, ignoring logback.xml -->
                    <artifactId>org.slf4j</artifactId>                              
                    <groupId>slf4j-simple</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        
        <!-- URI templating by RFC6570 -->
        <dependency>
          <groupId>com.damnhandy</groupId>
          <artifactId>handy-uri-templates</artifactId>
          <version>2.1.7</version>
        </dependency>

        <!-- OAuth  support -->
        <!-- https://mvnrepository.com/artifact/org.keycloak/keycloak-core -->
        <dependency>
            <groupId>org.keycloak</groupId>
            <artifactId>keycloak-core</artifactId>
            <version>24.0.1</version>
            <exclusions>
                <exclusion>
                    <!-- mockserver-junit-jupiter has 1.1, but transitive resolving has 1.2.2 somewhere-->
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-core</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- Logging dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.11</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>2.0.9</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.4.14</version>
        </dependency>

        <!-- Unit test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.1</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter -->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.7.0</version>
            <scope>test</scope>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.mock-server/mockserver-junit-jupiter -->
        <dependency>
          <groupId>org.mock-server</groupId>
          <artifactId>mockserver-junit-jupiter</artifactId>
          <version>5.15.0</version>
          <exclusions>
            <!-- Project has it through jetty-servlet-api v.4.0.6 somewhere. -->
            <exclusion>
              <groupId>javax.servlet</groupId>
              <artifactId>javax.servlet-api</artifactId>
            </exclusion>
            <!-- Project has istack-commons-runtime-3.0.12 from KB util dependency -->
            <exclusion>
              <groupId>com.sun.xml.bind</groupId>
              <artifactId>jaxb-core</artifactId>
            </exclusion>
          </exclusions>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>2.8.9</version>
        </dependency>        
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
            <version>5.4.2</version>
         </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <directory>src/main/openapi</directory>
                <filtering>true</filtering>
            </resource>
            <!-- Needed as specifying <resources> overrides all previous definitions -->
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <plugins>

            <plugin>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>
                <executions>
                    <execution>
                        <!--This ensures that the ds-image-openapi_*.yaml have been filtered and copied to target/classes
                        BEFORE being used by the openapi generator above-->
                        <phase>generate-sources</phase>
                        <!--as both the openapi codegen and this execution happens at phase generate-sources, ensure
                        this happens first by having this placed above codegen in the pom-->
                        <goals>
                            <goal>resources</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>copy-resources</id>
                        <phase>compile</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${basedir}/target/jetty-res</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>src/test/jetty</directory>
                                    <filtering>true</filtering>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.openapitools</groupId>
                <artifactId>openapi-generator-maven-plugin</artifactId>
                <version>4.3.1</version>
                <!-- Running this gives
                     [WARNING] The value (generator's option) must be either boolean or string. Default to `false`.
                     which seems to be an unresolved issue: https://github.com/OpenAPITools/openapi-generator/issues/9008 -->
                <configuration>
                    <!-- https://openapi-generator.tech/docs/generators/java/ -->

                    <generatorName>jaxrs-cxf-extended</generatorName>
                    <inputSpec>${project.build.outputDirectory}/openapi.yaml</inputSpec><!-- Will always be overridden -->
                    <modelNameSuffix>Dto</modelNameSuffix>
                    <generateSupportingFiles>false</generateSupportingFiles>
                    <generateApiTests>false</generateApiTests>
                    <generateModelDocumentation>true</generateModelDocumentation>
                    <generateApis>true</generateApis>
                    <output>${project.basedir}</output>
                    <templateDirectory>src/main/templates/</templateDirectory>
                    <configOptions>
                        <withXml>true</withXml>  <!-- Needed for XML serialization support in the Model -->
                        <!--https://openapi-generator.tech/docs/generators/jaxrs-cxf-extended/-->
                        <sourceFolder>target/generated-sources</sourceFolder>
                        <useSwaggerFeature>true</useSwaggerFeature>
                        <useSwaggerUI>true</useSwaggerUI>
                        <apiPackage>${project.package}.api</apiPackage>
                        <modelPackage>${project.package}.model</modelPackage>
                        <!--<dateLibrary>threetenbp</dateLibrary>-->
                        <!--<dateLibrary>Java11</dateLibrary>-->
                        <implFolder>src/main/java</implFolder>
                        <invokerPackage>${project.package}</invokerPackage>
                    </configOptions>
                    <packageName>${project.package}</packageName>
                </configuration>
                <executions>

                    <!-- Version 1 -->
                    <!-- When a new version is needed, make a copy of three v1-related executions below, then change
                         v1 to v2 in the copy.
                         Go to plugin.configuration.webResources.resource.includes in this pom.xml and extend the list
                         with v2 versions of the JSON & YAML files.

                         Also remember to:
                         * Create dk.kb.image.webservice.Application_v2
                         * Create src/main/openapi/ds-image-openapi_v2.yaml
                         * Update src/main/webapp/WEB-INF/web.xml
                         * Update src/main/webapp/api/index.html
                    -->

                    <execution>
                        <!-- Generate API file from the OpenAPI specification (positioned under the target/generated-sources/ folder).
                             These files are overwritten on all builds, so they should never be edited manually. -->
                        <id>v1: Generate model and api classes</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/ds-image-openapi_v1.yaml</inputSpec>
                            <ignoreFileOverride>
                                ${project.basedir}/.openapi-codegen-ignore-api
                            </ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.package}.api.v1</apiPackage>
                                <modelPackage>${project.package}.model.v1</modelPackage>
                                <!-- Setting this to true overwrites existing implementations.
                                     Only set it temporarily when creating a new project -->
                                <generateOperationBody>false</generateOperationBody>
                                <sourceFolder>target/generated-sources</sourceFolder>
                            </configOptions>
                        </configuration>
                    </execution>
                    <execution>
                        <!-- The purpose is to generate skeleton implementation classes, if such classes are not already existing.
                         Since we always want to overwrite existing api & model-files when the OpenAPI specification is changed,
                         but never want to overwrite existing implementation-files, we need to do the generation in 2 steps. -->
                        <id>v1: Generate skeleton impl</id>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <inputSpec>${project.build.outputDirectory}/ds-image-openapi_v1.yaml</inputSpec>
                            <ignoreFileOverride>${project.basedir}/.openapi-codegen-ignore-impl</ignoreFileOverride>

                            <configOptions>
                                <apiPackage>${project.package}.api.v1</apiPackage>
                                <modelPackage>${project.package}.model.v1</modelPackage>
                                <generateOperationBody>true</generateOperationBody>
                            </configOptions>
                            <skipOverwrite>true</skipOverwrite>
                        </configuration>
                    </execution>
                 </executions>
            </plugin>

            <!-- The generated classes for the OpenAPI client are problematic. Disable checking of those for now -->
            <plugin>
                <groupId>de.thetaphi</groupId>
                <artifactId>forbiddenapis</artifactId>
                <!-- No version or configuration here as it inherits from parent pom -->
                <configuration>
                    <excludes>
                        <exclude>**/AccessApi.class</exclude>
                        <exclude>**/ServiceApi.class</exclude>
                    </excludes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <configuration>
                    <webXml>src/main/webapp/WEB-INF/web.xml</webXml>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>

                    <!-- Generate a JAR with client classes and openapi-YAML for easy use by other services -->
                    <attachClasses>true</attachClasses>

                    <!--Enable maven filtering for the web.xml-->
                    <filteringDeploymentDescriptors>true</filteringDeploymentDescriptors>
                    <webResources>
                        <webResource> <!-- Store application name, version and build time -->
                          <directory>${basedir}/src/main/resources/</directory>
                          <includes>
                            <include>ds-image.build.properties</include>
                          </includes>
                          <filtering>true</filtering>
                        </webResource>
                        <resource>
                            <!--Include the openapi spec files so we can serve them-->
                            <directory>${project.build.outputDirectory}</directory>
                            <targetPath>.</targetPath>
                            <includes>
                                <include>ds-image-openapi_v1.json</include>
                                <include>ds-image-openapi_v1.yaml</include>
                            </includes>
                        </resource>
                    </webResources>
                </configuration>
            </plugin>


            <!-- Used only for mvn jetty:run jetty:run-war -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>10.0.12</version>
                <configuration>
                  <deployMode>FORK</deployMode>
                  <jvmArgs>-Xmx256m -Djetty.port=9077</jvmArgs>
                  <jettyXmls>${project.basedir}/target/jetty-res/jetty-env.xml</jettyXmls>
                    <useTestScope>true</useTestScope>
                    <!-- https://www.eclipse.org/jetty/documentation/jetty-10/programming-guide/index.html#jetty-run-goal -->
                    <!-- https://stackoverflow.com/questions/12493798/jetty-maven-plugin-using-scan -->
                    <scan>2</scan>
                    <webApp>
                        <contextPath>/${project.artifactId}/</contextPath>
                        <descriptor>${project.basedir}/target/${project.build.finalName}/WEB-INF/web.xml</descriptor>
                        <jettyEnvXml>${project.basedir}/target/jetty-res/jetty-env.xml</jettyEnvXml>
                    </webApp>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <tarLongFileMode>posix</tarLongFileMode>
                    <descriptors>
                        <descriptor>src/main/assembly/assembly.xml</descriptor>
                    </descriptors>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
            </plugin>
          <!-- Plugin used to extract information on the current git setup.
     See: https://github.com/git-commit-id/git-commit-id-maven-plugin -->
          <plugin>
            <groupId>io.github.git-commit-id</groupId>
            <artifactId>git-commit-id-maven-plugin</artifactId>
            <version>7.0.0</version>
            <executions>
              <execution>
                <id>get-the-git-infos</id>
                <goals>
                  <goal>revision</goal>
                </goals>
                <phase>initialize</phase>
              </execution>
            </executions>
            <configuration>
              <includeOnlyProperties>
                <includeOnlyProperty>git.commit.id</includeOnlyProperty>
                <includeOnlyProperty>git.branch</includeOnlyProperty>
                <includeOnlyProperty>git.closest.tag.name</includeOnlyProperty>
                <includeOnlyProperty>git.commit.author.time</includeOnlyProperty>
              </includeOnlyProperties>
            </configuration>
          </plugin>
        </plugins>
    </build>

</project>
